// 65 (8*8 + 1) input neurons
// 32 hidden neurons in layer 1
// 32 hidden neurons in layer 2
// 10 output neurons (for digits 0-9)

let input_layer: array[float] = std::mem::calloc(65): array[float];
let activation1: array[float] = std::mem::calloc(32): array[float];
let activation2: array[float] = std::mem::calloc(32): array[float];
let output_layer: array[float] = std::mem::calloc(10): array[float];
let activations: array[array[float]] = [input_layer, activation1, activation2, output_layer];


let weights1[32, 65]: array[float] = std::mem::calloc(32 * 65): array[float];
let weights2[32, 32]: array[float] = std::mem::calloc(32 * 32): array[float];
let weights3[10, 32]: array[float] = std::mem::calloc(32 * 10): array[float];
let weights: array[array[float]] = [weights1, weights2, weights3];

let dims: array[int] = [65, 32, 32, 10];

let grad1[32, 65]: array[float] = std::mem::calloc(32 * 65): array[float];
let grad2[32, 32]: array[float] = std::mem::calloc(32 * 32): array[float];
let grad3[10, 32]: array[float] = std::mem::calloc(32 * 10): array[float];
let grad: array[array[float]] = [grad1, grad2, grad3];

let net_inputs1[32]: array[float] = std::mem::calloc(32): array[float];
let net_inputs2[32]: array[float] = std::mem::calloc(32): array[float];
let net_inputs3[10]: array[float] = std::mem::calloc(10): array[float];
let net_inputs: array[array[float]] = [net_inputs1, net_inputs2, net_inputs3];

